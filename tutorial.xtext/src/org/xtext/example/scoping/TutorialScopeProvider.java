/*
 * generated by Xtext 2.27.0
 */
package org.xtext.example.scoping;


import java.util.List;
import java.util.stream.Collectors;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;

import tutorial.BasicItemType;
import tutorial.ComplexItemType;
import tutorial.Component;
import tutorial.Factory;
import tutorial.ItemConnection;
import tutorial.ItemType;
import tutorial.Marker;
import tutorial.TutorialPackage;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class TutorialScopeProvider extends AbstractDeclarativeScopeProvider {

	public IScope scope_Component_itemType(Component component, EReference eReference) {
		
		if (eReference.equals(TutorialPackage.Literals.COMPONENT__ITEM_TYPE))  {
			Factory factory = (Factory) component.eContainer().eContainer();
			List<ItemType> itemTypes = factory.getItemTypes().stream()
					.filter(itemType -> itemType instanceof BasicItemType)
					.collect(Collectors.toList());
			return Scopes.scopeFor(itemTypes);
		}
		return IScope.NULLSCOPE;
	}
	
	public IScope scope_ItemConnection_componentA(ItemConnection itemConnection, EReference eReference) {
		if(eReference.equals(TutorialPackage.Literals.ITEM_CONNECTION__COMPONENT_A)) {
			ComplexItemType containingComplexItem = (ComplexItemType) itemConnection.eContainer();
			return Scopes.scopeFor(containingComplexItem.getComponents());
		}
		return IScope.NULLSCOPE;
	}
	
	public IScope scope_ItemConnection_markerA(ItemConnection itemConnection, EReference eReference) {
		
		if(eReference.equals(TutorialPackage.Literals.ITEM_CONNECTION__MARKER_A)) {
			Component itemComponentA = itemConnection.getComponentA();
			return Scopes.scopeFor(itemComponentA.getItemType().getMarkers());
		}
		
		return IScope.NULLSCOPE;
	}
	
	public IScope scope_ItemConnection_componentB(ItemConnection itemConnection, EReference eReference) {
		
		if(eReference.equals(TutorialPackage.Literals.ITEM_CONNECTION__COMPONENT_B)) {
			ComplexItemType containingComplexItem = (ComplexItemType) itemConnection.eContainer();
			Component itemComponentA = itemConnection.getComponentA();
			return Scopes.scopeFor(containingComplexItem.getComponents().stream()
					.filter(component -> !component.equals(itemComponentA))
					.collect(Collectors.toList())
					);
					
		}
		return IScope.NULLSCOPE;
	}	
}