/*
 * generated by Xtext 2.27.0
 */
package at.ac.tuwien.big.serializer;

import at.ac.tuwien.big.services.T2GrammarAccess;
import com.google.inject.Inject;
import factoryTutorial.BasicItemType;
import factoryTutorial.ComplexItemType;
import factoryTutorial.Component;
import factoryTutorial.Factory;
import factoryTutorial.FactoryTutorialPackage;
import factoryTutorial.OverseasItem;
import factoryTutorial.OverseasMaterial;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class T2SemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private T2GrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == FactoryTutorialPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case FactoryTutorialPackage.BASIC_ITEM_TYPE:
				sequence_BasicItemType(context, (BasicItemType) semanticObject); 
				return; 
			case FactoryTutorialPackage.COMPLEX_ITEM_TYPE:
				sequence_ComplexItemType(context, (ComplexItemType) semanticObject); 
				return; 
			case FactoryTutorialPackage.COMPONENT:
				sequence_Component(context, (Component) semanticObject); 
				return; 
			case FactoryTutorialPackage.FACTORY:
				sequence_Factory(context, (Factory) semanticObject); 
				return; 
			case FactoryTutorialPackage.OVERSEAS_ITEM:
				sequence_OverseasItem(context, (OverseasItem) semanticObject); 
				return; 
			case FactoryTutorialPackage.OVERSEAS_MATERIAL:
				sequence_OverseasMaterial(context, (OverseasMaterial) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     ItemType returns BasicItemType
	 *     BasicItemType returns BasicItemType
	 *
	 * Constraint:
	 *     name=EString
	 * </pre>
	 */
	protected void sequence_BasicItemType(ISerializationContext context, BasicItemType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FactoryTutorialPackage.Literals.ITEM_TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FactoryTutorialPackage.Literals.ITEM_TYPE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBasicItemTypeAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ItemType returns ComplexItemType
	 *     ComplexItemType returns ComplexItemType
	 *
	 * Constraint:
	 *     (name=EString overseasitem=[OverseasItem|EString]? overseasmaterial=[OverseasMaterial|EString]? (component+=Component component+=Component*)?)
	 * </pre>
	 */
	protected void sequence_ComplexItemType(ISerializationContext context, ComplexItemType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Component returns Component
	 *
	 * Constraint:
	 *     (itemtype=[ItemType|EString]? overseasitem=[OverseasItem|EString]? overseasmaterial=[OverseasMaterial|EString]?)
	 * </pre>
	 */
	protected void sequence_Component(ISerializationContext context, Component semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Factory returns Factory
	 *
	 * Constraint:
	 *     (name=EString (overseasitem+=OverseasItem overseasitem+=OverseasItem*)? (itemtype+=ItemType itemtype+=ItemType*)?)
	 * </pre>
	 */
	protected void sequence_Factory(ISerializationContext context, Factory semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     OverseasItem returns OverseasItem
	 *
	 * Constraint:
	 *     (name=EString (overseasmaterial+=OverseasMaterial overseasmaterial+=OverseasMaterial*)?)
	 * </pre>
	 */
	protected void sequence_OverseasItem(ISerializationContext context, OverseasItem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     OverseasMaterial returns OverseasMaterial
	 *
	 * Constraint:
	 *     name=EString
	 * </pre>
	 */
	protected void sequence_OverseasMaterial(ISerializationContext context, OverseasMaterial semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FactoryTutorialPackage.Literals.OVERSEAS_MATERIAL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FactoryTutorialPackage.Literals.OVERSEAS_MATERIAL__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOverseasMaterialAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
