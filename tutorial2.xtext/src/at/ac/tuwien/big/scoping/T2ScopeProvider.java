/*
 * generated by Xtext 2.27.0
 */
package at.ac.tuwien.big.scoping;


import java.util.ArrayList;
import java.util.Iterator;
/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
import java.util.List;
import java.util.stream.Collectors;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;

import factoryTutorial.*;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class T2ScopeProvider extends AbstractDeclarativeScopeProvider {
	
	boolean checkCondition(OverseasItem item, OverseasMaterial material) {
		return item.getName().charAt(item.getName().length()-1) == material.getName().charAt(material.getName().length()-1)?true:false;
	}
	
	public IScope scope_ComplexItemType_overseasmaterial(ComplexItemType complexItemType, EReference eReference) {
		if(eReference.equals(FactoryTutorialPackage.Literals.COMPLEX_ITEM_TYPE__OVERSEASMATERIAL)) {
			System.out.println("Scoping for complex item type and overseasmaterial");
			Factory factory = (Factory) complexItemType.eContainer();
			List<OverseasMaterial> overseasMaterials = new ArrayList<OverseasMaterial>();
			Iterator<EObject> iterator = factory.eAllContents();
			while(iterator.hasNext()) {
				EObject obj = iterator.next();
				if(obj.eClass().equals(FactoryTutorialPackage.Literals.OVERSEAS_MATERIAL)) {
						overseasMaterials.add((OverseasMaterial) obj);
				}
			}
			return Scopes.scopeFor(overseasMaterials.stream()
					.filter(overseasMaterial -> checkCondition(complexItemType.getOverseasitem(), overseasMaterial))
					.collect(Collectors.toList())
					);
		}
		return IScope.NULLSCOPE;
	}
	
	public IScope scope_Component_itemtype(Component component, EReference eReference) {
		
		if (eReference.equals(FactoryTutorialPackage.Literals.COMPONENT__ITEMTYPE))  {
			System.out.println("Scoping for component itemtype");
			Factory factory = (Factory) component.eContainer().eContainer();
			List<ItemType> itemTypes = factory.getItemtype().stream()
					.filter(itemType -> itemType instanceof BasicItemType)
					.collect(Collectors.toList());
			return Scopes.scopeFor(itemTypes);
		}
		return IScope.NULLSCOPE;
	}
}